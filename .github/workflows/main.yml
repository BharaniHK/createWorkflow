name: Check For Changes to Monitored Files

on:
  push:
    branches: 
     - main
  pull_request:
    branches:
      - main
      - development
       
jobs:
  check_changes_and_alert:
    runs-on: ubuntu-latest

    steps: 
    - name: Checkout code
      uses: actions/checkout@v3 
      with:
       fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}

    - name: Check and Alert if watched files changed
      id: check-and-alert
      run: |
        changed_files=$(git diff --name-only HEAD^ HEAD)
         
         for file in $changed_files; do
            if [[ $file == *.html || $file == *.jsx ]]; then
              # Get the differences for the name attribute
                # Extract the old and new name values
                
                old_value=$(git show ${{ github.event.before }}:$file | grep -E 'id=' | sed -n 's/.*id="\([^"]*\)".*/\1/p' )
                new_value=$(git show ${{ github.sha }}:$file | grep -E 'id=' | sed -n 's/.*id="\([^"]*\)".*/\1/p' )

                 echo "$new_value" new value
              # Print old values
                echo "FileName: $file:"
                while IFS= read -r old1; do
                # echo " Old Value: '$old1'"
               # git log -p -1 HEAD~1 --oneline --pickaxe-regex -S "${old1}" ${file} | grep -E "${old1}" | sed '/^+/s/^+//; /name=/d'
                 old_values_array+=("$old1") 
                done <<< "$old_value"
                
                while IFS= read -r new1; do
               #  echo " New Value: '$new1'"    
                 changed_id_values+=("$new1")   
                 done <<< "$new_value"

              # Print the array of changed name values
             
               length1=${#changed_id_values[@]}
               length2=${#old_values_array[@]}
               echo "Changed name values and lengeth stored in array: '$length1' and '$length2'"

             #---------------------- To print value of old and new attribute values from array -----------------------
              #for value in "${changed_name_values[@]}"; do
              #  echo "$value" --- new values array
              #done
              # for value in "${changed_name_values[@]}"; do
               #  echo "$value" --- old values array
              #done
               # if [ "$old_value" != "$new_value" ]; then
                #  echo "Updated id value: $new_value"
                #  echo "Old id value: $old_value"
                #fi

             #----------------------------------------------------------------------------
            
             #To find the difference between changed and updated values of name attribute
              for (( i=0; i<length1; i++ )); do
                if [ "${changed_id_values[i]}" != "${old_values_array[i]}" && "$length1" ==="$length2" ]; then
                 
                
                 #git_log_output= git log -p -1 --oneline --pickaxe-regex -S "${changed_id_values[i]}" ${file} | grep -E "${changed_name_values[i]}"
                
                 #if grep -qE "$git_log_output" "$file"; then
                  echo "Index $i: ID Attributes that are updated -  '${old_values_array[i]}' is updated to '${changed_name_values[i]}'"
                 #fi
                 
                fi
              done
              echo "The lines where value of id attribute is updated from the codebase is:"
           #  git_log_output= git log -p -1 --oneline --pickaxe-regex -S "${changed_id_values}" ${file} | grep -E "${changed_name_values}"
             git log -p --${file} | grep -E '(^\+.*name:|^\-.*name:|^commit )'
            fi
          done
